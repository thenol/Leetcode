"""
[medium]

给你一个整数 n ，以二进制字符串的形式返回该整数的 负二进制（base -2）表示。

注意，除非字符串就是 "0"，否则返回的字符串中不能含有前导零。

示例 1：

输入：n = 2
输出："110"
解释：(-2)2 + (-2)1 = 2
示例 2：

输入：n = 3
输出："111"
解释：(-2)2 + (-2)1 + (-2)0 = 3
示例 3：

输入：n = 4
输出："100"
解释：(-2)2 = 4
 

提示：

0 <= n <= 109

https://leetcode.cn/problems/convert-to-base-2/description/?source=vscode
"""

# 核心思路：
"""
https://leetcode.cn/problems/convert-to-base-2/solutions/2758780/wei-yun-suan-by-chiwen-beh0/?source=vscode

10=1010(2)=11110(−2)
7=111(2)=1011(−2)
3=11(2)=111(−2)
10: 2^3+2^1 = 2^4-2^3+2^2-2^1
对于奇数i位置的bit来说 ，此处由二进制的加号改为了减号，因此数字大小上小了 2^(i+1),因此当需要加上 2^(i+1)进行补偿。
"""

class Solution:
    def baseNeg2(self, n: int) -> str:
        # 初始化一个空字符串用于存储结果
        ans = ""
        
        # 如果输入数字为0，直接返回"0"
        if n == 0:
            return "0"
        
        # 初始化索引变量，用于跟踪当前位是否为奇数位
        index = 0
        
        # 使用while循环进行负二进制转换
        while n > 0:
            # 如果当前位是奇数位，并且当前数字的最低位是1，则将n加2
            if (index & 1) == 1 and (n & 1) == 1:
                n += 2 # 注意：这个奇数位在负二进制中，代表 -2^i ，因此必须进行补充，补充2，也就是0b10，也就是补充2^(i+1)，此时i==0
            # 将当前位的值（0或1）追加到结果字符串的末尾
            ans += str(n & 1)
            # 索引自增
            index += 1
            # 将n右移一位，准备处理下一位
            n >>= 1
        
        # 返回转换后的负二进制字符串，由于是逆序生成的，所以需要反转
        return ans[::-1]